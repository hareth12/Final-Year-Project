package com.SSOBankAdmin;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.Hashtable;
import java.util.Properties;

import javax.ejb.ActivationConfigProperty;
import javax.ejb.EJB;
import javax.ejb.MessageDriven;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageListener;
import javax.jms.Queue;
import javax.jms.QueueConnection;
import javax.jms.QueueConnectionFactory;
import javax.jms.QueueSender;
import javax.jms.QueueSession;
import javax.jms.TextMessage;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import com.LoginBankAdmin.LoginBankAdminRemote;
import com.trustBankAdmin.TrustBankAdminRemote;


/**
 * Message-Driven Bean implementation class for: RBK
 * 
 */
@MessageDriven(mappedName = "SSOBankAdminQueue", activationConfig = { @ActivationConfigProperty(propertyName = "destinationType", propertyValue = "javax.jms.Queue") })
public class SSOBankAdminEJB implements MessageListener {
	QueueConnection cnn = null;
    QueueSender sender = null;
    QueueSession session = null;
    InitialContext ctx;
    Hashtable ht = new Hashtable();
	
    
    //==========
	private void replyToServlet(String message){	
        try {
        	ht.put(Context.INITIAL_CONTEXT_FACTORY, "weblogic.jndi.WLInitialContextFactory");
        	ht.put(Context.PROVIDER_URL,"t3://localhost:7001");

            ctx = new InitialContext(ht);
            Queue queue = (Queue) ctx.lookup("SSOBankAdminReplyQueue");
            QueueConnectionFactory factory = (QueueConnectionFactory) ctx.lookup("SSOBankAdminReplyConnectionFactory");
            cnn = factory.createQueueConnection();
            session = cnn.createQueueSession(false, QueueSession.AUTO_ACKNOWLEDGE);
            TextMessage msg = session.createTextMessage();

            msg.setText(message);
            sender = session.createSender(queue);
            sender.send(msg);
            
           
            System.out.println("<sso><replyToServlet>");
            session.close(); // this is important.
        } catch (Exception e) {
            e.printStackTrace();
        }
	}
	//==========
	
	@EJB (mappedName="LoginBankAdmin")
	LoginBankAdminRemote loginBankAdmin;
	
	@EJB (mappedName="TrustBankAdmin")
	TrustBankAdminRemote trustBankAdmin;
	
	
	/**
	 * Default constructor.
	 */
	public SSOBankAdminEJB() {
		
	}

	public void onMessage(Message message) {
		TextMessage tmsg = null;
		tmsg = (TextMessage) message;
		int opCode = 99;
		String parameter1 = null;
		String parameter2 = null;
		String parameter3 = null;
		
		//parsing message into opcode, and parameters
		String preParse;
		try {
			preParse = tmsg.getText();
			String[] postParse=preParse.split("[|]+");
			opCode=Integer.parseInt(postParse[0]);
			parameter1=postParse[1];
			parameter2=postParse[2];
			parameter3=postParse[3];
			
		} catch (JMSException e1) {
			e1.printStackTrace();
		}
		
		
		switch(opCode){
			case 11: 
				
				try {
					if(parameter1!=null && parameter2!=null && !parameter1.isEmpty() && !parameter2.isEmpty()){
						//merely renaming
						String idBankAdmin = parameter1;
						String password = parameter2;
						SSODataBankAdmin s = login(idBankAdmin,password);
						
						if(s.getLoginSuccess()){
							replyToServlet("19|"+s.getCookieHash()+"|");
						}
						else
							replyToServlet("10||");
					}
					
				} catch (Exception e1) {
					e1.printStackTrace();	
				}
				break;
				
			case 21:
				
				try {
					if(parameter1!=null && !parameter1.isEmpty()){
						//merely renaming
						String userHash = parameter1;
						SSODataBankAdmin s = login(idBankAdmin,password);
						
						if(s.getLoginSuccess()){
							replyToServlet("19|"+s.getCookieHash()+"|");
						}
						else
							replyToServlet("10||");
					}
					
				} catch (Exception e1) {
					e1.printStackTrace();	
				}
				break;
			
			case 31:	//2FA stage 2
	
				break;
				
			case 41:

				break;
			
			case 51:

				break;		
			
			case 61:  //getLoginName

				break;
				
			case 71:

				break;	
				
			case 81:

				break;	
			
			case 91:

				break;	
			
			case 101:
				break;
			}
		
	}
	
	private SSODataBankAdmin login(String idBankAdmin, String password) {
		SSODataBankAdmin s = new SSODataBankAdmin();
		boolean b = loginBankAdmin.login(idBankAdmin, password);
		if(b){
			s.setLoginSuccess(true);
			String c = trustBankAdmin.newLogin(idBankAdmin);
			s.setCookieHash(c);
		}else{
			s.setCookieHash(null);
			s.setLoginSuccess(false);
		}
		
		return s;
	}
	

	
}

