package uobBankAdmin.account;

import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import uob.data.AccountLinkDataStructure;
import uobBankAdmin.service.ICHClientService;
import uobBankAdmin.service.RBKClientService;
import uobBankAdmin.service.SSOClientService;


public class AccountActivation extends HttpServlet {
	private static final long serialVersionUID = 1L;

    public AccountActivation() {
        super();
    }

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		Boolean validCookieBool = false;
		Cookie[] cookies = request.getCookies();
		String userHash = getClientHash(cookies);
		SSOClientService ssocs = new SSOClientService();
		
	
		if(userHash!=null){
			if(ssocs.checkTrust(userHash)>1){
				validCookieBool=true;
				System.out.println("<bankAdmin><AccountCreation>userHash = "+userHash);
			}	
		}
		else{
			System.out.println("<bankAdmin><AccountCreation>userHash from Client is null!");
		}
		
		
		if(validCookieBool){
			String userName=ssocs.getLoginName(userHash);
			System.out.println("<bankAdmin><AccountCreation>userName= "+userName);
			
			List<String> records = ssocs.getListOfUnactivatedPIBAccounts();
			request.setAttribute("records", records);
			
			RequestDispatcher dispatcher = request.getRequestDispatcher("/Account/L2/accountActivation1.jsp");
			if (dispatcher != null) dispatcher.forward(request, response);
		}
		else{
			RequestDispatcher dispatcher = request.getRequestDispatcher("/Login/timedOut.jsp");
			if (dispatcher != null) dispatcher.forward(request, response);
		}
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	}
	
	private String getClientHash(Cookie[] cookies){
		 for(int i=0; i<cookies.length; i++) {
		      Cookie cookie = cookies[i];
		      System.out.println("cookieName = "+ cookie.getName());
		     
		      if (cookie.getName().equals("AdminUserHash")){
		    	  System.out.println("returning = "+cookie.getValue());
		    	  return(cookie.getValue());
		      }
		       
		    }
		return null;
		
	}
	
	
	private String[] getStringArray(List<String> x){
		String [] object = null;
		if(payeeList!=null){	
			int row = payeeList.size() + 1;	
			object = new String[row][2];
			object[0][0] = "Account Number";
			object[0][1] = "IndexHash";
	
			
			int i = 0;
			while(i!=(row-1)){
				object[i][0] = Long.toString(payeeList.get(i).getPayeeAccount());
				object[i][1] = payeeList.get(i).getAccountLinkHash();
				i++;
			}
			return object;
		}
		return object;
	}


}
