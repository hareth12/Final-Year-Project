package uob.service;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.Queue;
import javax.jms.QueueConnection;
import javax.jms.QueueConnectionFactory;
import javax.jms.QueueReceiver;
import javax.jms.QueueSender;
import javax.jms.QueueSession;
import javax.jms.TextMessage;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import uob.data.AccountClass;


public class HistClientService {
	private QueueConnection requestorQueueConnection = null;
	private QueueSender requestorQueueSender = null;
	private QueueSession requestorSession = null;
	private InitialContext ctx;
	private Hashtable requestorHashTable = new Hashtable();
    
	private QueueConnection replyQueueConnection = null;
	private Destination replyQueue;
	private QueueReceiver replyReceiver=null;
	private QueueSession replySession = null;
    //===========
		
	public HistClientService(){}
	
	
     public String sendRequestHistory(String message){
    	 requestorHashTable.put(Context.INITIAL_CONTEXT_FACTORY, "weblogic.jndi.WLInitialContextFactory");
    	 requestorHashTable.put(Context.PROVIDER_URL,"t3://localhost:7001");
    	 String returnString=null;
    	 
         try {
        	 ctx = new InitialContext(requestorHashTable);
	         Queue queue = (Queue) ctx.lookup("HistQueue");
	         QueueConnectionFactory requestorFactory = (QueueConnectionFactory) ctx.lookup("HistConnectionFactory");
	         requestorQueueConnection = requestorFactory.createQueueConnection();
	         requestorSession = requestorQueueConnection.createQueueSession(false, QueueSession.AUTO_ACKNOWLEDGE);
	         
	         QueueConnectionFactory replyFactory = (QueueConnectionFactory) ctx.lookup("HistReplyConnectionFactory");
	         replyQueueConnection = replyFactory.createQueueConnection();	 
	         replySession = replyQueueConnection.createQueueSession(false, QueueSession.AUTO_ACKNOWLEDGE);
	         replyQueue = (Destination) ctx.lookup("HistReplyQueue");
	         replyReceiver = replySession.createReceiver((Queue) replyQueue);
	       
	         TextMessage msg = requestorSession.createTextMessage();	      
	         msg.setText(message);
	         msg.setJMSReplyTo(replyQueue);
	         requestorQueueSender = requestorSession.createSender(queue);
	         requestorQueueSender.send(msg);
	         System.out.println("reply to: "+msg.getJMSMessageID());
           
	         System.out.println("Message sent successfully to remote queue.");
	         
	         returnString = receiveSync();
	         requestorSession.close(); // this is important.
	         replySession.close();
		} catch (NamingException e) {
			e.printStackTrace();
		} catch (JMSException e) {
			e.printStackTrace();
		}
			
		
		return returnString;
		
     }
	//=======
    
     private String receiveSync() throws JMSException{
    	 System.out.println("<pib><History><receiveSync>"); 
    	 replyQueueConnection.start();
    	 Message msg = replyReceiver.receive();
    	 TextMessage tmsg = (TextMessage) msg;
    	 replyQueueConnection.close();
    	 String returnString = null;
    	
    	 if(msg==null)
    		 System.out.println("msg is null");
    	 else{
    		 System.out.println("msg is not null");
    	 	 System.out.println("content of reply:  "+tmsg.getText());
    		 returnString = tmsg.getText();
    		 return returnString;
    		 }
    	 return returnString;
     }
     
     public String addHistory(String idPib){ //opCode = 11
    	 System.out.println("<RBKClientService><getAccount> method is called with idPib = "+idPib);
    	 
    	List<AccountClass> accountList = new ArrayList<AccountClass>();
		String returnFromRBK = null;
		String opCodeString=null;
		String accountNumberString = null;
		String currentBalanceString = null;
		String availableBalanceString = null;
		String accountType = null;
    	
		if((idPib!=null)&&(!idPib.isEmpty())){
    		returnFromRBK=sendRequestRBK("11|"+idPib+"|filler|filler|filler|filler|filler");
    		System.out.println("returnFromRBK= "+returnFromRBK);
    	}
		
		if(returnFromRBK!=null){
			String[] postParse = returnFromRBK.split("[|]+");
			opCodeString = postParse[0];
			int j= postParse.length;
			
			//active
			if(opCodeString.equals("19")){
				int i=1;
				while(i!=j){
					System.out.println("<fypWebService><RBKClientService>accountNumber = "+postParse[i]);
					accountNumberString = postParse[i];
					i++;
					System.out.println("<fypWebService><RBKClientService>accountType = "+postParse[i]);
					accountType = postParse[i];
					i++;
					System.out.println("<fypWebService><RBKClientService>currentBalance = "+postParse[i]);
					currentBalanceString = postParse[i];
					i++;
					System.out.println("<fypWebService><RBKClientService>availableBalance = "+postParse[i]);
					availableBalanceString = postParse[i];
					i++;
				
					long accountNumber = Long.parseLong(accountNumberString);
					double currentBalance=Double.parseDouble(currentBalanceString);
					double avaibleBalance=Double.parseDouble(availableBalanceString);
					AccountClass x = new AccountClass();
					
					x.setAccountNumber(accountNumber);
					x.setAccountType(accountType);
					x.setAvailableBalance(avaibleBalance);
					x.setCurrentBalance(currentBalance);
					
					accountList.add(x);
	
				}	
			}
				return accountList;
		}
		else{
			System.out.println("<rbkClientService><getAccount>returnFromRBK is null");
		}
		
    	return null;
    	 
     }

     
     
     
}

