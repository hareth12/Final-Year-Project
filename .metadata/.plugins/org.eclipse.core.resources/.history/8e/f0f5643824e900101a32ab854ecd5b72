package com.history;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Random;

import javax.ejb.Stateful;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import com.account.AccountClass;


/**
 * Session Bean implementation class Account
 */
@Stateful(mappedName="History")
public class History implements HistoryRemote {

	
	@PersistenceContext(unitName="history-unit")
	private EntityManager em;


	@Override
	public void addLogin1FASuccess(String idPib) {
		long loginTime = System.currentTimeMillis();
		long txnNumber=txnNumberGenerator();		
		HistoryClass h = new HistoryClass();
		h.setIdPib(idPib);
		h.setTime(loginTime);
		h.setTxnName("1FA Login");
		h.setStatus("Success");
		h.setTxnNumber(txnNumber);
		em.persist(h);
	}
	
	@Override
	public void addLogin1FANotSuccess(String idPib) {
		long loginTime = System.currentTimeMillis();
		long txnNumber=txnNumberGenerator();		
		HistoryClass h = new HistoryClass();
		h.setIdPib(idPib);
		h.setTime(loginTime);
		h.setTxnName("1FA Login");
		h.setStatus("Failed");
		h.setTxnNumber(txnNumber);
		em.persist(h);
		
	}
	
	private long txnNumberGenerator(){
		String numberS = hashGenerator(10);
		long number = Long.parseLong(numberS);
		HistoryClass x = em.find(HistoryClass.class, number);
		while(x!=null){
			System.out.println("<History><txnNumberGenerator>running...");
			numberS = hashGenerator(10);
			number = Long.parseLong(numberS);
			x = em.find(HistoryClass.class, number);	
		}
		return number;
	}
	
	private String hashGenerator(int len){
		String AB = "0123456789";
		Random rnd = new Random();
		StringBuilder sb = new StringBuilder(len);
		for( int i = 0; i < len; i++ ) 
		      sb.append( AB.charAt( rnd.nextInt(AB.length()) ) );		
		return sb.toString();
		
	}

	@Override
	public void addLogin2FANotSuccess(String idPib) {
		long loginTime = System.currentTimeMillis();
		long txnNumber=txnNumberGenerator();		
		HistoryClass h = new HistoryClass();
		h.setIdPib(idPib);
		h.setTime(loginTime);
		h.setTxnName("2FA Login");
		h.setStatus("Failed");
		h.setTxnNumber(txnNumber);
		em.persist(h);
		
	}

	@Override
	public void addLogin2FASuccess(String idPib) {
		long loginTime = System.currentTimeMillis();
		long txnNumber=txnNumberGenerator();		
		HistoryClass h = new HistoryClass();
		h.setIdPib(idPib);
		h.setTime(loginTime);
		h.setTxnName("2FA Login");
		h.setStatus("Success");
		h.setTxnNumber(txnNumber);
		em.persist(h);
		
	}

	@Override
	public List<HistoryData> getHistory(String idPib) {
		System.out.println("<Account><getAccount>idPib = "+idPib);
		//List<AccountClassClean> accountList = new ArrayList<AccountClassClean>(); 
		
		Query q = em.createQuery("SELECT m from AccountClass m where m.idPib = ?1 ");
		q.setParameter(1, idPib);
		List<AccountClass> resultList=q.getResultList();
		
		
		//checking purpose
		System.out.println("<Account><getAccount>size = "+ resultList.size());
		int index = resultList.size();
		int i =0;
		while(i!=index){
			
			/*
			AccountClassClean x = new AccountClassClean();
			x.setAccountNumber(resultList.get(i).getAccountNumber());
			x.setAccountType(resultList.get(i).getAccountType());
			x.setAvailableBalance(resultList.get(i).getAvailableBalance());
			x.setCurrentBalance(resultList.get(i).getCurrentBalance());
			x.setIdPib(idPib);
			accountList.add(x);
			*/
			
			System.out.println("<Account><getAccount>AccountNumber   = "+ resultList.get(i).getAccountNumber());
			System.out.println("<Account><getAccount>Account Type    = "+ resultList.get(i).getAccountType());
			System.out.println("<Account><getAccount>Current Balance = "+ resultList.get(i).getCurrentBalance());
			System.out.println("<Account><getAccount>Avail Balance   = "+ resultList.get(i).getAvailableBalance());
			i++;
		}
		
		return resultList;
	}

}

