package uobBankAdmin.service;

package uobBankAdmin.service;


import java.util.Hashtable;

import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.Queue;
import javax.jms.QueueConnection;
import javax.jms.QueueConnectionFactory;
import javax.jms.QueueReceiver;
import javax.jms.QueueSender;
import javax.jms.QueueSession;
import javax.jms.TextMessage;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import uobBankAdmin.data.SSOData;


public class SSOClientService {
	
	private QueueConnection requestorQueueConnection = null;
	private QueueSender requestorQueueSender = null;
	private QueueSession requestorSession = null;
	private InitialContext ctx;
	private Hashtable requestorHashTable = new Hashtable();
    
	private QueueConnection replyQueueConnection = null;
	private Destination replyQueue;
	private QueueReceiver replyReceiver=null;
	private QueueSession replySession = null;
	
	//======================
	public String sendRequestSSO(String message){
   	 requestorHashTable.put(Context.INITIAL_CONTEXT_FACTORY, "weblogic.jndi.WLInitialContextFactory");
   	 requestorHashTable.put(Context.PROVIDER_URL,"t3://localhost:7001");
   	 String returnString=null;
   	 
        try {
       	 ctx = new InitialContext(requestorHashTable);
	         Queue queue = (Queue) ctx.lookup("SSOBankAdminQueue");
	         QueueConnectionFactory requestorFactory = (QueueConnectionFactory) ctx.lookup("SSOBankAdminConnectionFactory");
	         requestorQueueConnection = requestorFactory.createQueueConnection();
	         requestorSession = requestorQueueConnection.createQueueSession(false, QueueSession.AUTO_ACKNOWLEDGE);
	         
	         QueueConnectionFactory replyFactory = (QueueConnectionFactory) ctx.lookup("SSOBankAdminReplyConnectionFactory");
	         replyQueueConnection = replyFactory.createQueueConnection();	 
	         replySession = replyQueueConnection.createQueueSession(false, QueueSession.AUTO_ACKNOWLEDGE);
	         replyQueue = (Destination) ctx.lookup("SSOBankAdminReplyQueue");
	         replyReceiver = replySession.createReceiver((Queue) replyQueue);
	       
	         
	         
	         TextMessage msg = requestorSession.createTextMessage();	      
	         msg.setText(message);
	         msg.setJMSReplyTo(replyQueue);
	         requestorQueueSender = requestorSession.createSender(queue);
	         requestorQueueSender.send(msg);
	         System.out.println("reply to: "+msg.getJMSMessageID());
          
	         System.out.println("Message sent successfully to remote queue.");
	         
	         returnString = receiveSync();
	         requestorSession.close(); // this is important.
	         replySession.close();
		} catch (NamingException e) {
			
			e.printStackTrace();
		} catch (JMSException e) {
			
			e.printStackTrace();
		}
		
		
		return returnString;
		
    }
	//=======
   
    private String receiveSync() throws JMSException{
   	 System.out.println("<bankAdmin><Login><receiveSync>"); 
   	 String returnString=null;
   	 replyQueueConnection.start();
   	 Message msg = replyReceiver.receive();
   	 TextMessage tmsg = (TextMessage) msg;
   	 replyQueueConnection.close();
   	
   	 if(msg==null)
   		 System.out.println("msg is null");
   	 else{
   		 System.out.println("msg is not null");
   	 	 System.out.println("content of reply:  "+tmsg.getText());
   	 	 
   	 	 returnString=tmsg.getText();
   	 	 }
   		 return returnString;
    }
	
	//======================
    
    public boolean checkTrust(String userHash){
    	boolean trustSuccess = false;
    	String returnFromSSO = sendRequestSSO("21|"+userHash+"|filler|filler");
    	if(returnFromSSO.equals("29||"))
    		trustSuccess=true;
    	
    	return trustSuccess;
    }

	public SSOData login(String userName, String password) {
		SSOData ssoData = new SSOData();
    	String opCodeString=null;
		String returnFromSSO=null;
		ssoData.setLoginSuccess(false);
		
		if((userName!=null)&&(password!=null)&&!userName.isEmpty()&&!password.isEmpty()){
			returnFromSSO=sendRequestSSO("11|"+userName+"|"+password+"|filler");
			System.out.println("returnFromSSO= "+returnFromSSO);
		}
		else{
			System.out.println("<BankAdmin><ssoClientService><login1FA>idPib/password is null/empty.0");
		}
		
		if(returnFromSSO!=null){
			String[] postParse=returnFromSSO.split("[|]+");
			opCodeString=postParse[0];
			
			if(opCodeString.equals("19")){
				//add parameter 1 & 2 into here 
				String cookie = postParse[1]; //for renaming purpose
				ssoData.setCookieHash(cookie);
				System.out.println("<BankAdmin><SSOClientService><login1FA>cookie = "+cookie);
				ssoData.setLoginSuccess(true);
				return ssoData;
				
			}
			else{
				ssoData.setLoginSuccess(false);
				ssoData.setCookieHash(null);
				return ssoData;
			}
				
		}
		else{
			System.out.println("<BankAdmin><ssoClientService><login>returnFromSSO is null");
		}
		ssoData.setCookieHash(null);
		return ssoData;
	}
    
	public String getLoginName(String hash){
    	String returnFromSSO=null;
    	String opCodeString=null;
    	
    	if((hash!=null)&&(!hash.isEmpty())){
			returnFromSSO=sendRequestSSO("31|"+hash+"|filler|filler");
			System.out.println("returnFromSSO= "+returnFromSSO);
		}
		else{
			System.out.println("<bankAdmin><ssoClientService><getLoginName>hash is null/empty.");
		}
		
		if(returnFromSSO!=null){
			String[] postParse=returnFromSSO.split("[|]+");
			opCodeString=postParse[0];
			
			if(opCodeString.equals("39")){
				
				String loginName = postParse[1]; //for renaming purpose
				return loginName;	
				
			}
			else{
				return null;
			}
				
		}
		else{
			System.out.println("<bankAdmin><ssoClientService><getLoginName>returnFromSSO is null");
		}
    
    return null;
    }

	public boolean createPIBaccount(String idPib, String telephone) {
		String returnFromSSO=null;
    	String opCodeString=null;
    	
    	if(idPib!=null&& telephone!=null && !idPib.isEmpty() && !telephone.isEmpty()){
			returnFromSSO=sendRequestSSO("41|"+idPib+"|"+telephone+"|filler|filler");
			System.out.println("returnFromSSO= "+returnFromSSO);
		}
		else{
			System.out.println("<bankAdmin><ssoClientService><createPIBaccount>hash is null/empty.");
		}
		
		if(returnFromSSO!=null){
			String[] postParse=returnFromSSO.split("[|]+");
			opCodeString=postParse[0];
			
			if(opCodeString.equals("49"))
				return true;	
			else
				return false;		
		}
		else{
			System.out.println("<bankAdmin><ssoClientService><createPIBaccount>returnFromSSO is null");
		}
    
    return false;
	}
}